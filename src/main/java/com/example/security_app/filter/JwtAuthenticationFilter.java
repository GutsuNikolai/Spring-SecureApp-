package com.example.security_app.filter;

import com.example.security_app.config.JwtUtil;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;
import java.util.List;

@Component
public class JwtAuthenticationFilter extends OncePerRequestFilter {

    @Autowired
    private JwtUtil jwtUtil;

    @Autowired
    private UserDetailsService userDetailsService;

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization
        String authHeader = request.getHeader("Authorization");
        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
            filterChain.doFilter(request, response);
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º —Ç–æ–∫–µ–Ω (—É–±–∏—Ä–∞–µ–º "Bearer ")
        String token = authHeader.substring(7);
        System.out.println("üîç JWT —Ñ–∏–ª—å—Ç—Ä —Å—Ä–∞–±–æ—Ç–∞–ª. –¢–æ–∫–µ–Ω: " + token);

        try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ —Ç–æ–∫–µ–Ω–∞
            String username = jwtUtil.extractUsername(token);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
                UserDetails userDetails = userDetailsService.loadUserByUsername(username);

                // TODO –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–∞ –ø—Ä–µ–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–≤–æ–∞—Ç–µ–ª—é
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –ª–∏ —Ç–æ–∫–µ–Ω
                if (jwtUtil.validateToken(token, userDetails)){

                    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    List<String> roles = jwtUtil.extractRoles(token);
                    List<SimpleGrantedAuthority> authorities = roles.stream()
                            .map(SimpleGrantedAuthority::new)
                            .toList();

                    UsernamePasswordAuthenticationToken authToken =
                            new UsernamePasswordAuthenticationToken(userDetails, null, authorities);

                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –≤ SecurityContext
                    authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
                    SecurityContextHolder.getContext().setAuthentication(authToken);
                }
            }
        } catch (Exception e) {
            System.out.println("JWT token is invalid: " + e.getMessage());
        }

        // –ü–µ—Ä–µ–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–∞–ª—å—à–µ
        filterChain.doFilter(request, response);
    }
}
